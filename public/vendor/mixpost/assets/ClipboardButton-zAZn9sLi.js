var g=Object.defineProperty;var y=(t,e,s)=>e in t?g(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s;var n=(t,e,s)=>y(t,typeof e!="symbol"?e+"":e,s);import{n as f,u as h,C as M,o as r,g as i,w as l,j as o,aU as S,c as p,z as k,t as _,b as C,Y as b,k as v,I as B}from"./app-BxavtTYs.js";import{C as w}from"./Clipboard-D9JxKoAX.js";class u{static setSuccessMessage(e){return this.successMessage=e,this}static setErrorMessage(e){return this.errorMessage=e,this}static async copy(e){const{notify:s}=f();if(navigator.clipboard)try{await navigator.clipboard.writeText(e),s("success",this.successMessage)}catch{s("error",this.errorMessage)}else s("error","Clipboard API not supported!")}}n(u,"successMessage",""),n(u,"errorMessage","");const $={key:0},z={key:1},P={__name:"ClipboardButton",props:{component:{type:String,default:"PrimaryButton"},componentSize:{type:String,default:"md"},showText:{type:Boolean,default:!0},htmlElm:{type:[Object,String],required:!0},successMessage:{type:String,default:""},errorMessage:{type:String,default:""}},setup(t){const{t:e}=h(),s=t,a=M(null),m={PrimaryButton:v,PureButton:B},d=()=>{u.setSuccessMessage(s.successMessage?s.successMessage:e("system.copied_clipboard")).setErrorMessage(s.errorMessage?s.errorMessage:e("system.failed_copied_clipboard")).copy(s.htmlElm.innerText).then(()=>{a.value=!0,setTimeout(()=>{a.value=null},2e3)}).catch(()=>{a.value=!1})};return(c,E)=>(r(),i(b(m[t.component]),{onClick:d,size:t.componentSize},{icon:l(()=>[a.value===null?(r(),i(w,{key:0})):o("",!0),a.value===!0?(r(),i(S,{key:1})):o("",!0)]),default:l(()=>[c.$slots.default?(r(),p("span",$,[k(c.$slots,"default")])):o("",!0),!c.$slots.default&&t.showText?(r(),p("span",z,_(C(e)("system.copy")),1)):o("",!0)]),_:3},8,["size"]))}};export{P as _};
